{"version":3,"sources":["util/OWM.js","Components/WeatherIcons.js","Components/WindDirection.js","Components/WeatherData.js","Components/SearchBar.js","Components/Footer.js","App.js","index.js"],"names":["upperCaseFirstLetter","string","str","strFirstLetter","slice","toUpperCase","strLength","length","convertTimeStamp","ts","timezone","Date","toUTCString","currentTime","today","hours","getHours","minutes","getMinutes","toDateString","OWM","search","city","units","cityEscaped","encodeURIComponent","unitsEscaped","fetch","then","response","json","data","console","log","JSON","stringify","name","country","sys","weatherConditionCode","weather","id","description","temp","Math","round","main","feelslike","feels_like","tempmin","temp_min","tempmax","temp_max","humidity","sunrise","sunset","cloudiness","clouds","all","iconSource","icon","windspeedKnot","wind","speed","windspeedKmH","winddeg","deg","RenderWeatherIcon","props","this","weatherData","className","src","React","Component","WindDirection","windDeg","WeatherData","state","celsius","tempUnit","handleClickToFarenheit","bind","handleClickToCelsius","handleConversion","setState","tempRF","onClick","handleConversionRealFeel","SearchBar","handleCityChange","handleSubmit","keyPressed","event","target","value","onSearchStarted","key","type","placeholder","onChange","onKeyPress","Footer","href","App","undefined","startSearch","getWeather","URL","document","location","searchParams","get","cityName","params","set","window","history","replaceState","toString","promiseWeatherData","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.387cc3a6.chunk.js","sourcesContent":["const apiKey = \"d8d349d845326a05731f3af54ad5e65e\";\n\nconst upperCaseFirstLetter = (string) => {\n  let str = string;\n  let strFirstLetter = str.slice(0, 1).toUpperCase();\n  let strLength = str.length;\n  let restOfStr = str.slice(1, strLength + 1);\n\n  return strFirstLetter + restOfStr;\n};\n\nconst convertTimeStamp = (ts,timezone) => {\n  // convert unix timestamp to milliseconds\n  let ts_ms = (ts + timezone )* 1000 ;\n\n  // initialize new Date object\n  let date_ob = new Date(ts_ms);\n\n  let utcString = date_ob.toUTCString(); \n  let time = utcString.slice(-12, -7); \n\n  return time;\n};\n\nconst currentTime = () => {\n  let today = new Date();\n  let hours = (\"0\" + today.getHours()).slice(-2);\n  let minutes = (\"0\" + today.getMinutes()).slice(-2);\n  return today.toDateString() + \" \" + hours + \":\" + minutes;\n};\n\nconst OWM = {\n  search(city, units) {\n    const cityEscaped = encodeURIComponent(city);\n    const unitsEscaped = encodeURIComponent(units);\n\n    return fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${cityEscaped}&units=${unitsEscaped}&appid=${apiKey}`\n    )\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        console.log(JSON.stringify(data));\n        return {\n          city: data.name,\n          country: data.sys.country,\n          weatherConditionCode: data.weather[0].id,\n          description: upperCaseFirstLetter(data.weather[0].description),\n          temp: Math.round(data.main.temp),\n          feelslike: Math.round(data.main.feels_like),\n          tempmin: Math.round(data.main.temp_min),\n          tempmax: Math.round(data.main.temp_max),\n          humidity: data.main.humidity,\n          sunrise: convertTimeStamp(data.sys.sunrise,data.timezone),\n          sunset: convertTimeStamp(data.sys.sunset,data.timezone),\n          cloudiness: data.clouds.all,\n          iconSource:\n            \"http://openweathermap.org/img/wn/\" +\n            data.weather[0].icon +\n            \"@2x.png\",\n          windspeedKnot: Math.round(data.wind.speed * 1.95),\n          windspeedKmH: Math.round(data.wind.speed * 3.6),\n          winddeg: data.wind.deg,\n          currentTime: currentTime(),\n        };\n      });\n  },\n};\n\nexport default OWM;\n","import React from \"react\";\n\nimport \"./WeatherIcons.css\";\n\nexport class RenderWeatherIcon extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    let weatherConditionCode = this.props.weatherData.weatherConditionCode;\n\n    if (weatherConditionCode == 800) {\n      return (\n        <div className=\"icon sunny\">\n          <div className=\"sun\">\n            <div className=\"rays\"></div>\n          </div>\n        </div>\n      );\n    } else if (weatherConditionCode > 800) {\n      return (\n        <div className=\"icon cloudy\">\n          <div className=\"cloud\"></div>\n          <div className=\"cloud\"></div>\n        </div>\n      );\n    } else if (weatherConditionCode >= 700) {\n      return <img src={this.props.weatherData.iconSource} />;\n    } else if (weatherConditionCode >= 600) {\n      return (\n        <div className=\"icon flurries\">\n          <div className=\"cloud\"></div>\n          <div className=\"snow\">\n            <div className=\"flake\"></div>\n            <div className=\"flake\"></div>\n          </div>\n        </div>\n      );\n    } else if (weatherConditionCode >= 5 || weatherConditionCode >= 3) {\n      return (\n        <div className=\"icon rainy\">\n          <div className=\"cloud\"></div>\n          <div className=\"rain\"></div>\n        </div>\n      );\n    } else if (weatherConditionCode >= 2) {\n      return (\n        <div className=\"icon thunder-storm\">\n          <div className=\"cloud\"></div>\n          <div className=\"lightning\">\n            <div className=\"bolt\"></div>\n            <div className=\"bolt\"></div>\n          </div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n","import React from \"react\";\n\nexport class WindDirection extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let windDeg = this.props.weatherData.winddeg;\n\n    if (windDeg === 0) {\n      return <div>from S to N</div>;\n    } else if (windDeg <= 45) {\n      return <div>from SW to NE</div>;\n    } else if (windDeg <= 90) {\n      return <div>from W to E</div>;\n    } else if (windDeg <= 135) {\n      return <div>from NW to SE</div>;\n    } else if (windDeg <= 180) {\n      return <div>from N to S</div>;\n    } else if (windDeg <= 225) {\n      return <div>from NE to SW</div>;\n    } else if (windDeg <= 270) {\n      return <div>from E to W</div>;\n    } else {\n      return <div>from SE to NW</div>;\n    }\n  }\n}\n","import React from \"react\";\nimport \"./WeatherData.css\";\nimport { RenderWeatherIcon } from \"./WeatherIcons\";\nimport { WindDirection } from \"./WindDirection\";\n\nexport class WeatherData extends React.Component {\n  constructor(props) {\n    super(props);\n\n   \n    this.state = {celsius:true, tempUnit:\"°C\"}\n    this.handleClickToFarenheit=this.handleClickToFarenheit.bind(this)\n    this.handleClickToCelsius=this.handleClickToCelsius.bind(this)\n    this.handleConversion=this.handleConversion.bind(this);\n  }\n\n  handleClickToFarenheit(){\n    console.log(\"celsius to false\")\n    this.setState({celsius:false, tempUnit:\"°F\"})\n  }\n\n  handleClickToCelsius(){\n    console.log(\"celsius to true\")\n    this.setState({celsius:true, tempUnit:\"°C\"})\n  }\n\n  handleConversion(){\n    let temp = this.props.weatherData.temp;\n    if (this.state.celsius){\n      return temp;\n    } else {\n      return Math.round((temp+32)*1.8);\n    }\n  }\n\n  handleConversionRealFeel(){\n    let tempRF = this.props.weatherData.feelslike;\n    if (this.state.celsius){\n      return tempRF;\n    } else {\n      return Math.round((tempRF+32)*1.8);\n    }\n  }\n\n  render() {\n    let weatherData = this.props.weatherData;\n\n    if (weatherData == null) {\n      return null;\n    }\n\n    return (\n      <div>\n        <div className=\"main-container\">\n          <h2 className=\"font-weight-lg\">\n            {weatherData.city}, {weatherData.country}\n          </h2>\n\n          <h6>Last updated: {weatherData.currentTime}</h6>\n          <span><span onClick={this.handleClickToCelsius} className={this.state.celsius == true ? \"activeTemp temp-clickable\" : \"temp-clickable\"}>°C</span> <span>|</span> <span onClick={this.handleClickToFarenheit} className={this.state.celsius == false ? \"activeTemp temp-clickable\" : \"temp-clickable\"}>°F</span></span>\n\n          <div className=\"flex-container\">\n            <div>\n              <RenderWeatherIcon weatherData={this.props.weatherData} />\n              <h3>{weatherData.description}</h3>\n              <h1>\n                <span className=\"font-weight-lg\">{this.handleConversion()}<span>{this.state.tempUnit}</span></span>\n               \n              </h1>\n              <h5>\n                <span>feels like: {this.handleConversionRealFeel()}<span>{this.state.tempUnit}</span></span>\n              </h5>\n            </div>\n          </div>\n\n          <div className=\"flex-container\">\n            <table>\n              <tbody>\n                <tr>\n                  <td className=\"font-weight-lg\">Humidity:</td>\n                  <td>{weatherData.humidity}%</td>\n                </tr>\n                <tr>\n                  <td className=\"font-weight-lg\">Cloudiness:</td>\n                  <td>{weatherData.cloudiness}%</td>\n                </tr>\n                <tr>\n                  <td className=\"font-weight-lg\">Wind speed:</td>\n                  <td>\n                    {weatherData.windspeedKnot} knots | {weatherData.windspeedKmH} km/h\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"font-weight-lg\">Wind direction:</td>\n                  <td>\n                    <WindDirection weatherData={this.props.weatherData} />\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"font-weight-lg\">Sunrise:</td>\n                  <td>{weatherData.sunrise}</td>\n                </tr>\n                <tr>\n                  <td className=\"font-weight-lg\">Sunset:</td>\n                  <td>{weatherData.sunset}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport \"./SearchBar.css\"\n\nexport class SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weatherData: {\n        city: \"Montreal\",\n      },\n    };\n    this.handleCityChange = this.handleCityChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.keyPressed=this.keyPressed.bind(this);\n  }\n\n  handleCityChange(event) {\n    this.setState({\n      city: event.target.value,\n    });\n  }\n\n  handleSubmit() {\n    this.props.onSearchStarted(this.state.city);\n  }\n\n  keyPressed(event) {\n    if (event.key === \"Enter\") {\n      this.handleSubmit()\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Search for city...\"\n          onChange={this.handleCityChange}\n          onKeyPress={this.keyPressed}\n          className=\"no-outline\"\n        />\n        <button type=\"submit\" onClick={this.handleSubmit}>\n          Search\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport \"./Footer.css\"\n\nexport class Footer extends React.Component{\n    \n    render(){\n        return (\n            <div className=\"footer\">\n                <div> Developed in React by <a href=\"https://github.com/luluvann/react-weather-app\">Lulu</a></div>\n            </div>\n        )\n    }\n\n}","import React from \"react\";\nimport OWM from \"./util/OWM\";\n\nimport { WeatherData } from \"./Components/WeatherData\";\nimport { SearchBar } from \"./Components/SearchBar\";\nimport { Footer } from \"./Components/Footer\";\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = { weatherData: undefined};\n    this.startSearch = this.startSearch.bind(this);\n    this.getWeather = this.getWeather.bind(this);\n\n    //The 2 below variables work together and will read the value specified to the parameter \"city\" of the browser url https://myapp.com/?city={value_specified_to_city_param}\n    let params = (new URL(document.location)).searchParams;\n    let city = params.get('city');\n\n    //At the launch of the app, Montreal will be the argument to the function startSearch if no value is specified to the params city of the url, if specified, it will trigger the search of for the city specified\n    if (city == null){\n      this.startSearch(\"Montreal\");\n    } else {\n      this.startSearch(city);\n    }\n  }\n\n  startSearch(cityName) {\n    //let queryParams = new URLSearchParams(window.location.search)\n    let params = (new URL(document.location)).searchParams\n    // Set new or modify existing parameter value\n    params.set(\"city\", cityName);\n    // Replace current querystring with the new one\n    window.history.replaceState(null, null, \"?\"+params.toString());\n    this.getWeather(cityName, \"metric\");\n  }\n\n  //getWeather is the function that calls the API from the OWM\n  getWeather(city, units) {\n    if (city == null || units == null) {\n      return;\n    }\n    OWM.search(city, units).then((promiseWeatherData) => {\n      this.setState({\n        weatherData: promiseWeatherData,\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <SearchBar onSearchStarted={this.startSearch} />\n        <WeatherData weatherData={this.state.weatherData} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n\n    <App />\n,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}